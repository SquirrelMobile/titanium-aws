/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.aws;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.app.Activity;

import java.io.File;

import com.amazonaws.mobile.client.AWSMobileClient;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;
import com.amazonaws.services.s3.AmazonS3Client;

import com.amazonaws.regions.Regions;
import com.amazonaws.auth.CognitoCachingCredentialsProvider;
import com.amazonaws.regions.Region;

@Kroll.proxy(creatableInModule=TitaniumAmazonAwsModule.class)
public class S3TransferManagerProxy extends KrollProxy
{
	// Standard Debugging variables
	private static final String LCAT = "TiS3TransferManager";
	private static final boolean DBG = TiConfig.LOGD;

	private CognitoCachingCredentialsProvider credentialsProvider;

	// Constructor
	public S3TransferManagerProxy()
	{
		super();

		Context appContext = TiApplication.getInstance();
		if (appContext == null) return;

		credentialsProvider = new CognitoCachingCredentialsProvider(
			appContext, // Context
			"YOUR_POOL_ID", // Identity Pool ID
			Regions.US_WEST_1 // Region
		);
	}

	// Methods
	@Kroll.method
	public void upload(KrollDict params)
	{
		final String file = params.getString("file");
		final String bucket = params.getString("bucket");
		final String key = params.getString("key");

		final KrollFunction success = (KrollFunction)params.get("success");
		final KrollFunction error = (KrollFunction)params.get("error");

		Context appContext = TiApplication.getInstance();
		if (appContext == null) return;

		AmazonS3Client s3Client = new AmazonS3Client(credentialsProvider);
 
		TransferUtility transferUtility =
				TransferUtility.builder()
						.context(appContext)
						.awsConfiguration(AWSMobileClient.getInstance().getConfiguration())
						.s3Client(s3Client)
						.build();
		
		TransferObserver uploadObserver = transferUtility.upload(key, new File(file));
		
		uploadObserver.setTransferListener(new TransferListener() {
		
			@Override
			public void onStateChanged(int id, TransferState state) {
				KrollObject krollObject = getKrollObject();
				if (krollObject == null) {
					return;
				}
				
				if (TransferState.COMPLETED == state) {
					KrollDict event = new KrollDict();
					event.put("body", key);

					success.callAsync(krollObject, event);
				}
			}
			
			@Override
			public void onProgressChanged(int id, long bytesCurrent, long bytesTotal) {}
			
			@Override
			public void onError(int id, Exception ex) {
				KrollObject krollObject = getKrollObject();
				if (krollObject == null) {
					return;
				}

				KrollDict event = new KrollDict();
				event.put("error", ex.getMessage());

				success.callAsync(krollObject, event);
			}
		});
	}
}
